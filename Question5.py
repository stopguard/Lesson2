"""
Создать вручную список, содержащий цены на товары (10–20 товаров), например:
[57.8, 46.51, 97, ...]
    A.  Вывести на экран эти цены через запятую в одну строку,
        цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»).
    B.  Вывести цены, отсортированные по возрастанию, новый список не создавать
            доказать, что объект списка после сортировки остался тот же.
    C.  Создать новый список, содержащий те же цены, но отсортированные по убыванию.
    D.  Вывести цены пяти самых дорогих товаров.
            Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?
"""
prices = []         # Объявляем список цен
price_string = ''   # Объявляем строку цен

# Собираем цены в список цен

if not (chose_list := input('Если хотите использовать шаблонный список ничего не вводите: ')):
    prices = [15.0, 20.0, 0.2, 6.45, 0.4, 0.15, 54.0, 2.3, 5.7, 4.0, 4.0]   # если лень вводить вручную
else:
    print('ВНИМАНИЕ! Введённые значения будут очищены от нецифровых символов и лишних точек!')
    while len(prices) <= 20:    # Проверяем чтобы цен не было больше 20 и что строка не пустая
        _price = '0'                # Обновляем строку цены
        _dot_enabled = True         # Обновляем доступность точек
        if len(prices) < 10:                                                          # если количество цен меньше 10
            string = input(f'Введите цену №{len(prices) + 1}: ')                            # то требуем ввод цены
        else:
            string = input(f'Введите цену №{len(prices) + 1} или не вводите для завершения: ')  # иначе предлагаем
            if not string:      # если введена пустая строка
                break               # выходим из цикла
        for digit in string:                # запускаем фильтр строки
            if digit.isdigit():                 # если цифра
                _price += digit                     # добавляем его к строке цены
            elif digit == '.' and _dot_enabled:  # иначе если точка и она доступна
                _price += digit                     # добавляем ее к цене
                _dot_enabled = False                # делаем ее недоступной
        _price = round(float(_price), 2)      # Преобразуем цену в float с округлением до 2 знаков после запятой
        if _price:                  # если цена не равна 0
            prices.append(_price)       # добавляем ее в список

print(f'\nID и содержимое списка:\n{id(prices)} {prices}\n')    # выводим список и его id

print('Задача A:')

for i, price in enumerate(prices):                          # пробегаем по элементам списка забирая их индексы
    _price = str(price).split('.')                              # разбиваем цену преобразованную в строку на части
    price_string += f'{_price[0]} руб. {_price[1]:0>2} коп.'    # подставляем их в форматирование и добавляем к строке
    if i + 1 < len(prices):                                     # если это не последний элемент
        price_string += ', '                                    # добавляем к строке запятую

print(f'Список цен: {price_string}')                        # выводим строку
print(f'ID и содержимое списка:\n{id(prices)} {prices}\n')  # выводим список и его id

print('Задача B:')

price_string = ''   # Сбрасываем строку цен
prices.sort()       # сортируем список цен
for i, price in enumerate(prices):                          # пробегаем по элементам списка забирая их индексы
    _price = str(price).split('.')                              # разбиваем цену преобразованную в строку на части
    price_string += f'{_price[0]} руб. {_price[1]:0>2} коп.'    # подставляем их в форматирование и добавляем к строке
    if i + 1 < len(prices):                                     # если это не последний элемент
        price_string += ', '                                    # добавляем к строке запятую

print(f'Цены по возрастанию: {price_string}')               # выводим строку
print(f'ID и содержимое списка:\n{id(prices)} {prices}\n')  # выводим список и его id

print('Задача C:')

price_string = ''                                   # Сбрасываем строку цен
desc_prices = list(sorted(prices, reverse=True))    # Передаём сортированный по убыванию список в в новый
for i, price in enumerate(desc_prices):                     # пробегаем по элементам списка забирая их индексы
    _price = str(price).split('.')                              # разбиваем цену преобразованную в строку на части
    price_string += f'{_price[0]} руб. {_price[1]:0>2} коп.'    # подставляем их в форматирование и добавляем к строке
    if i + 1 < len(desc_prices):                                # если это не последний элемент
        price_string += ', '                                        # добавляем к строке запятую

print(f'Цены по убыванию: {price_string}')                              # выводим строку
print(f'ID и содержимое списка 1:\n{id(prices)} {prices}')              # выводим исходник
print(f'ID и содержимое списка 2:\n{id(desc_prices)} {desc_prices}\n')  # выводим результат

print('Задача D:')

price_string = ''   # Сбрасываем строку цен
for i, price in enumerate(sorted(desc_prices)[:5:-1]):      # пробегаем по последним 5 элементам сортированного списка
    _price = str(price).split('.')                              # разбиваем цену преобразованную в строку на части
    price_string += f'{_price[0]} руб. {_price[1]:0>2} коп.'    # подставляем их в форматирование и добавляем к строке
    if i + 1 < 5:                                               # если это не последний элемент
        price_string += ', '                                        # добавляем к строке запятую

print(f'5 самых высоких цен: {price_string}')                           # выводим строку
print(f'ID и содержимое списка 1:\n{id(prices)} {prices}')              # убеждаемся что списки не изменились
print(f'ID и содержимое списка 2:\n{id(desc_prices)} {desc_prices}\n')
